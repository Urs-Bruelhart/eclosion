#!/bin/sh

# Can't find tty without this
cp -a /dev/tty /dev/tty-bak && cp -a /dev/console /dev/tty

GPG_TTY=$(tty)
export GPG_TTY
export gpghome=/root/.gnupg

# Daemonize the agent
GNUPGHOME="$gpghome" gpg-agent --quiet --daemon

# Connect the gpg-agent
GNUPGHOME="$gpghome" gpg-connect-agent 1>/dev/null learn /bye

# few functions

waiting_disk() {
  echo "Waiting for $1 ... "
  time=20
  i=1
  while [ $i -le $time ] ; do
    if findfs $1 >/dev/null 2>&1 ; then
      break
    elif [ -f $1 ] ; then
      break
    fi
    i=$(($i+1))
    sleep 1
  done
  [ $i -ge $time ] && echo "no found :("
  i= time=
}

# args: 1 path key , 2 device (UUID, PATH) , 3 map name
gpg_with_luks() {
  GPG_OPTS="--homedir $gpghome --no-mdc-warning --skip-verify --quiet --logger-file /dev/null --pinentry-mode loopback"

  [ -f $1 ] || echo "gpg key $1 no found..."
  waiting_disk $2
  #if ! findfs $2 >/dev/null ; then die "device $2 no found" ; fi

  { flock -s 9;
    i=1
    while [ $i -le 3 ] ; do
      gpg $GPG_OPTS -d $1 | cryptsetup --key-file=- open --type luks $2 $3
      ret=$?
      [ $ret -eq 0 -o $ret -eq 5 ] && break
      [ $ret -eq 1 ] && echo "Bad password"
      i=$(($i+1))
      GNUPGHOME="$gpghome" gpg-connect-agent 1>/dev/null reloadagent /bye
    done
  } 9>failure_lock

  if [ $ret -eq 2 ] ; then
    echo "Bad pass"
  elif [ $ret -ne 0 ] ; then
    echo "[Err]... key:$1 , device:$2, device map:$3"
  else
    echo "Device $3 opened..."
  fi
  [ $ret -eq 0 ] || echo $ret
}
